# Zephyr development image for Espressif targets (e.g. ESP32)

# Settings
ARG UBUNTU_VERSION=24.04
ARG ZEPHYR_CI_IMAGE_VERSION=0.26.15
# Zephyr 3.7.0 is not working with ESP32S3, see: https://github.com/zephyrproject-rtos/zephyr/issues/71397
#ARG ZEPHYR_RTOS_VERSION=3.7.0
ARG ZEPHYR_RTOS_COMMIT=7e9fb8b51fd9c40bf6673d6a82a612491a27548a
ARG ZEPHYR_SDK_VERSION=0.16.8
ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll"

#-------------------------------------------------------------------------------
# Base Image and Dependencies

# Use Ubuntu as the base image
FROM ubuntu:${UBUNTU_VERSION}

# Redeclare arguments after FROM
ARG ZEPHYR_RTOS_VERSION
ARG ZEPHYR_SDK_VERSION
ARG WGET_ARGS

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Update apt cache and install apt-utils along with any other base dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends apt-utils && \
    # Perform any necessary upgrades of existing packages
    apt-get upgrade -y && \
    # Clean up the apt cache to reduce image size
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install base packages
RUN apt-get -y update && \
	apt-get -y upgrade && \
	apt-get install --no-install-recommends -y \
        locales \
        git \
        cmake \
        ninja-build gperf \
        ccache \
        dfu-util \
        device-tree-compiler \
        wget \
        python3-dev \
        python3-pip \
        python3-setuptools \
        python3-tk \
        python3-wheel \
        python3-venv \
        xz-utils file \
        make \
        gcc \
        libsdl2-dev \
        libmagic1 \
        vim \
        nano \
        mc

# Set the locale (change this if you wish)
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8

# Set up a Python virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install west
RUN python3 -m pip install --no-cache-dir west

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Set up directories
RUN mkdir -p /workspace/ && \
mkdir -p /opt/toolchains

#-------------------------------------------------------------------------------
# Zephyr Toolchain

# Set Zephyr environment variables
ENV ZEPHYR_RTOS_VERSION=${ZEPHYR_RTOS_VERSION}
ENV ZEPHYR_SDK_VERSION=${ZEPHYR_SDK_VERSION}

# Install Zephyr
RUN cd /opt/toolchains && \
	git clone https://github.com/zephyrproject-rtos/zephyr.git && \
	cd zephyr && \
	git checkout ${ZEPHYR_RTOS_COMMIT} && \
	pip3 install -r scripts/requirements.txt

# Override the west manifest to only install necessary modules
COPY scripts/espressif/west.yml /opt/toolchains/zephyr/west.yml

# Instantiate west workspace and install tools
RUN cd /opt/toolchains && \
	west init -l zephyr && \
	west update && \
	west blobs fetch hal_espressif

# Install minimal Zephyr SDK
RUN cd /opt/toolchains && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
    tar xf zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz && \
    rm zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}_minimal.tar.xz

# Install host tools
RUN cd /opt/toolchains/zephyr-sdk-${ZEPHYR_SDK_VERSION} && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/hosttools_linux-${HOSTTYPE}.tar.xz && \
    tar xf hosttools_linux-${HOSTTYPE}.tar.xz && \
    rm hosttools_linux-${HOSTTYPE}.tar.xz && \
    bash zephyr-sdk-${HOSTTYPE}-hosttools-standalone-*.sh -y -d .

# Install toolchains for Espressif targets
RUN cd /opt/toolchains/zephyr-sdk-${ZEPHYR_SDK_VERSION} && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32_zephyr-elf.tar.xz && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32s2_zephyr-elf.tar.xz && \
    wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32s3_zephyr-elf.tar.xz && \
    tar xf toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32_zephyr-elf.tar.xz && \
    tar xf toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32s2_zephyr-elf.tar.xz && \
    tar xf toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32s3_zephyr-elf.tar.xz && \
    rm toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32_zephyr-elf.tar.xz && \
    rm toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32s2_zephyr-elf.tar.xz && \
    rm toolchain_linux-${HOSTTYPE}_xtensa-espressif_esp32s3_zephyr-elf.tar.xz

# Register the Zephyr SDK with CMake
ENV ZEPHYR_SDK_INSTALL_DIR=/opt/toolchains/zephyr-sdk-${ZEPHYR_SDK_VERSION}

#-------------------------------------------------------------------------------
# Entrypoint

# Entrypoint script that activates the Python venv and Zephyr env, then opens a bash shell
COPY scripts/espressif/entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Set the entrypoint script
ENTRYPOINT ["/entrypoint.sh"]
CMD []
