# Docker image for Zephyr development with Espressif targets (e.g. ESP32)

# Settings
ARG UBUNTU_VERSION=24.04
ARG ZEPHYR_CI_IMAGE_VERSION=0.26.15
# Zephyr 3.7.0 is not working with ESP32S3, see: https://github.com/zephyrproject-rtos/zephyr/issues/71397
#ARG ZEPHYR_RTOS_VERSION=3.7.0
ARG ZEPHYR_RTOS_COMMIT=7e9fb8b51fd9c40bf6673d6a82a612491a27548a
ARG ZEPHYR_SDK_VERSION=0.16.8
ARG WGET_ARGS="-q --show-progress --progress=bar:force:noscroll"

#-------------------------------------------------------------------------------
# Base Image and Dependencies

# Use Ubuntu as the base image
FROM ubuntu:${UBUNTU_VERSION}

# Redeclare arguments after FROM
ARG ZEPHYR_RTOS_VERSION
ARG ZEPHYR_SDK_VERSION
ARG WGET_ARGS

# Set default shell during Docker image build to bash
SHELL ["/bin/bash", "-c"]

# Set non-interactive frontend for apt-get to skip any user confirmations
ENV DEBIAN_FRONTEND=noninteractive

# Update apt cache and install apt-utils along with any other base dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends apt-utils && \
    # Perform any necessary upgrades of existing packages
    apt-get upgrade -y && \
    # Clean up the apt cache to reduce image size
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Install base packages
RUN apt-get -y update && \
	apt-get -y upgrade && \
	apt-get install --no-install-recommends -y \
		software-properties-common \
		lsb-release \
		autoconf \
		automake \
		bison \
		build-essential \
		ca-certificates \
		ccache \
		chrpath \
		cmake \
		cpio \
		device-tree-compiler \
		dfu-util \
		diffstat \
		dos2unix \
		doxygen \
		file \
		flex \
		g++ \
		gawk \
		gcc \
		gcovr \
		gdb \
		git \
		git-core \
		gnupg \
		gperf \
		# gtk-sharp2 \
		help2man \
		iproute2 \
		lcov \
		libcairo2-dev \
		libglib2.0-dev \
		libgtk2.0-0 \
		liblocale-gettext-perl \
		libncurses5-dev \
		libpcap-dev \
		libpopt0 \
		libsdl1.2-dev \
		libsdl2-dev \
		libssl-dev \
		libtool \
		libtool-bin \
		locales \
		make \
		net-tools \
		ninja-build \
		openssh-client \
		parallel \
		pkg-config \
		qemu-system \
		rsync \
		socat \
		srecord \
		sudo \
		texinfo \
		unzip \
		valgrind \
		wget \
		ovmf \
		xz-utils \
		thrift-compiler \
        vim \
		nano \
		mc

# Initialise system locale
RUN locale-gen en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US:en
ENV LC_ALL=en_US.UTF-8
        
# Install multi-lib gcc (x86 only)
RUN if [ "${HOSTTYPE}" = "x86_64" ]; then \
	apt-get install --no-install-recommends -y \
		gcc-multilib \
		g++-multilib \
	; fi

# Install i386 packages (x86 only)
RUN if [ "${HOSTTYPE}" = "x86_64" ]; then \
	dpkg --add-architecture i386 && \
	apt-get -y update && \
	apt-get -y upgrade && \
	apt-get install --no-install-recommends -y \
		libsdl2-dev:i386 libfuse-dev:i386 libc6-dbg:i386 \
	; fi

# Install Python3 and dependencies
RUN apt-get -y update && \
	apt-get -y upgrade && \
	apt-get install --no-install-recommends -y \
        python3-dev \
        python3-pip \
        python3-ply \
        python3-setuptools \
        python3-venv \
        python-is-python3 \
        libgirepository1.0-dev

# Set up a Python virtual environment
RUN python3 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
RUN python3 -m pip install -U --no-cache-dir pip && \
	python3 -m pip install -U --no-cache-dir wheel setuptools && \
	python3 -m pip install --no-cache-dir pygobject && \
	python3 -m pip install --no-cache-dir \
		-r https://raw.githubusercontent.com/zephyrproject-rtos/zephyr/main/scripts/requirements.txt \
		-r https://raw.githubusercontent.com/zephyrproject-rtos/mcuboot/main/scripts/requirements.txt \
		GitPython imgtool junitparser junit2html numpy protobuf PyGithub \
		pylint sh statistics west \
		nrf-regtool>=6.0.0

# Run pip check on x86 only for now, it fails on arm.
RUN if [ "${HOSTTYPE}" = "x86_64" ]; then \
	python3 -m pip check \
	; fi

# Clean up stale packages
RUN apt-get clean -y && \
	apt-get autoremove --purge -y && \
	rm -rf /var/lib/apt/lists/*

# Set up directories
RUN mkdir -p /workspace/ && \
mkdir -p /opt/toolchains

#-------------------------------------------------------------------------------
# Zephyr Toolchain

# Set Zephyr environment variables
ENV ZEPHYR_RTOS_VERSION=${ZEPHYR_RTOS_VERSION}
ENV ZEPHYR_SDK_VERSION=${ZEPHYR_SDK_VERSION}

# Install Zephyr
RUN cd /opt/toolchains && \
	git clone https://github.com/zephyrproject-rtos/zephyr.git && \
	cd zephyr && \
	git checkout ${ZEPHYR_RTOS_COMMIT} && \
	pip3 install -r scripts/requirements.txt

# Instantiate west workspace and install tools
RUN cd /opt/toolchains && \
	west init -l zephyr && \
	west update && \
	west blobs fetch hal_espressif
	
# Install Zephyr SDK
RUN cd /opt/toolchains && \
	wget ${WGET_ARGS} https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v${ZEPHYR_SDK_VERSION}/zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}.tar.xz && \
	tar xf zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}.tar.xz && \
	zephyr-sdk-${ZEPHYR_SDK_VERSION}/setup.sh -t all -h -c && \
	rm zephyr-sdk-${ZEPHYR_SDK_VERSION}_linux-${HOSTTYPE}.tar.xz

#-------------------------------------------------------------------------------
# Entrypoint

# Entrypoint script that activates the Python venv and Zephyr env, then opens a bash shell
RUN echo -e '#!/bin/bash\nsource /opt/toolchains/zephyr/zephyr-env.sh\nexec /bin/bash' > /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Set the entrypoint script
ENTRYPOINT ["/entrypoint.sh"]
CMD []
